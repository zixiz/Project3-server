{"version":3,"sources":["state/actions.js","compo/Register.js","compo/Login.js","compo/Admin.js","compo/User.js","App.js","serviceWorker.js","state/reducer.js","index.js"],"names":["LoginAction","input","_ref4","Object","asyncToGenerator","regenerator_default","a","mark","_callee4","dispatch","newObjToLogin","res","data","wrap","_context4","prev","next","console","log","username","pass","type","fetch","method","headers","Accept","Content-Type","body","JSON","stringify","sent","json","stop","_x4","apply","this","arguments","Register","state","name","repeat","ev","setState","defineProperty","target","value","props","registerAction","react_default","createElement","className","data-validate","required","onChange","handleText","bind","placeholder","onClick","sendToRegister","msg","Component","register","connect","_ref","_callee","newObjToRegister","_context","_x","RegisterAction","Login","handleTextforlogin","sendToLogin","login","Admin","admin","User","Logout","role","sendToLogout","user","_ref3","_callee3","response","_context3","_x3","App","CheckSession","compo_User","react_router_dom","to","react_router","path","exact","component","app","_ref2","_callee2","_context2","success","_x2","Boolean","window","location","hostname","match","initialState","myReducer","length","undefined","action","assign","clientName","status","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cd469808.chunk.js","sourcesContent":["export const RegisterAction = (input) => {\r\n   \r\n    return async function (dispatch) {\r\n       \r\n       let newObjToRegister = input;\r\n\r\n       if(newObjToRegister.name == \"\"||newObjToRegister.username==\"\"||newObjToRegister.pass==\"\"||newObjToRegister.repeat==\"\"){\r\n           console.log(\"all mendatory\")\r\n           dispatch({\r\n            type: \"ALL_INPUT_MANDATORY\",\r\n            data: null\r\n        });\r\n           \r\n       }else if(newObjToRegister.pass !== newObjToRegister.repeat){\r\n            debugger;\r\n            console.log(\"The password is incorrect\")\r\n            dispatch({\r\n                type: \"INCORRECTSECOND_PASS\",\r\n                data: null\r\n            });\r\n\r\n       }else{\r\n        \r\n        let res = await fetch('http://localhost:3000/register', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(newObjToRegister)\r\n        });\r\n\r\n        let data = await res.json();\r\n        dispatch({\r\n            type: \"REGISTERED\",\r\n            data: data.msg\r\n        });\r\n        debugger;\r\n       }\r\n\r\n    //    if(!this.state.name || !this.state.email || !this.state.username ||  !this.state.pass || !this.state.repeat)\r\n\r\n    };\r\n}\r\n\r\nexport const CheckSession = () =>{\r\n    return async function (dispatch){\r\n        let response = await fetch('http://localhost:3000/checksession');\r\n        let data = await response.json();\r\n        if(data.success == true){\r\n            dispatch({\r\n                type: \"CHECK_SESSION\",\r\n                data: data\r\n            });\r\n        }else{\r\n            dispatch({\r\n                type: \"SESSION_FAILED\",\r\n                data: null\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nexport const Logout = () =>{\r\n    return async function (dispatch){\r\n        let response = await fetch('http://localhost:3000/logout');\r\n        let data = await response.json();\r\n            dispatch({\r\n                type: \"LOGOUT\",\r\n                data: data\r\n            });\r\n    }\r\n}\r\n\r\nexport const LoginAction = (input) => {\r\n   \r\n    return async function (dispatch) {\r\n       \r\n       let newObjToLogin = input;\r\n       console.log(newObjToLogin);\r\n       if(newObjToLogin.username ==\"\" || newObjToLogin.pass==\"\"){\r\n        dispatch({\r\n            type: \"LOGIN_ERROR\",\r\n            data: null\r\n        });\r\n       }else{\r\n        let res = await fetch('http://localhost:3000/login', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(newObjToLogin)\r\n        });\r\n\r\n        let data = await res.json();\r\n        dispatch({\r\n            type: \"LOGIN_STATUS\",\r\n            data: data\r\n        });\r\n       }\r\n       \r\n        \r\n\r\n\r\n    };\r\n}","import React, { Component } from 'react';\nimport {RegisterAction} from '../state/actions';\nimport {connect} from 'react-redux';\n\n\nclass Register extends Component {\n  state ={\n    name:\"\",\n    username:\"\",\n    pass:\"\",\n    repeat:\"\"\n\n  }\n  handleText(ev)\n  {\n    this.setState({ [ev.target.name]:ev.target.value  })\n  }\n\n  sendToRegister(){\n    this.props.registerAction(this.state)\n    \n  }\n\n  render() {\n    return (\n      <div className=\"registerstyle\">\n              <div className=\"limiter\">\n                <div className=\"container-login100\">\n                  <div className=\"login100-more\"></div>\n\n                  <div className=\"wrap-login100 p-l-50 p-r-50 p-t-72 p-b-50\">\n                    <form className=\"login100-form validate-form\"/>\n                      <span className=\"login100-form-title p-b-59\">\n                        Sign Up\n                      </span>\n\n                      <div className=\"wrap-input100 validate-input\" data-validate=\"Name is required\">\n                        <span className=\"label-input100\">Full Name</span>\n                        <input required onChange={this.handleText.bind(this)}  className=\"input100\" type=\"text\" name=\"name\" placeholder=\"Name...\"/>\n                        <span className=\"focus-input100\"></span>\n                      </div>\n\n                      <div className=\"wrap-input100 validate-input\" data-validate=\"Username is required\">\n                        <span className=\"label-input100\">Username</span>\n                        <input required onChange={this.handleText.bind(this)}  className=\"input100\" type=\"text\" name=\"username\" placeholder=\"Username...\"/>\n                        <span className=\"focus-input100\"></span>\n                      </div>\n\n                      <div className=\"wrap-input100 validate-input\" data-validate = \"Password is required\">\n                        <span className=\"label-input100\">Password</span>\n                        <input required onChange={this.handleText.bind(this)}  className=\"input100\" type=\"password\" name=\"pass\" placeholder=\"*************\"/>\n                        <span className=\"focus-input100\"></span>\n                      </div>\n\n                      <div className=\"wrap-input100 validate-input\" data-validate = \"Repeat Password is required\">\n                        <span className=\"label-input100\">Repeat Password</span>\n                        <input required onChange={this.handleText.bind(this)} className=\"input100\" type=\"password\" name=\"repeat\" placeholder=\"*************\"/>\n                        <span className=\"focus-input100\"></span>\n                      </div>\n\n                      <div className=\"container-login100-form-btn\">\n                        <div className=\"wrap-login100-form-btn\">\n                          <div className=\"login100-form-bgbtn\"></div>\n                          <button onClick={this.sendToRegister.bind(this)} className=\"login100-form-btn\">\n                            Sign Up\n                          </button>\n                        </div>\n                      </div>\n                      <div className=\"wrap-input100 validate-input\" data-validate = \"Repeat Password is required\">\n                        {this.props.msg}\n                      </div>\n                  </div>\n                </div>\n              </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => { \n  return { msg: state.msg };\n}; \n\nconst  mapDispatchToProps = dispatch => {  \n  return  { \n      //every field change new action will dispatch \n      registerAction: function(input) { \n           return  dispatch(RegisterAction(input));\n          // return  dispatch({type:\"LOAD_MOVIES\", data:[]});\n        }\n      }\n  };\nconst register = connect(mapStateToProps, mapDispatchToProps)(Register);\n\nexport default register;\n","import React, { Component } from 'react';\nimport {LoginAction} from '../state/actions';\nimport {connect} from 'react-redux';\n\n\nclass Login extends Component {\n  state ={\n    username:\"\",\n    pass:\"\"\n  }\n  handleTextforlogin(ev)\n  {\n    this.setState({ [ev.target.name]:ev.target.value  })\n  }\n\n  sendToLogin(){\n    this.props.LoginAction(this.state)\n  }\n\n  render() {\n    return (\n      <div className=\"registerstyle\">\n              <div className=\"limiter\">\n                <div className=\"container-login100\">\n                  <div className=\"login100-more\"></div>\n\n                  <div className=\"wrap-login100 p-l-50 p-r-50 p-t-72 p-b-50\">\n                    <form className=\"login100-form validate-form\"/>\n                      <span className=\"login100-form-title p-b-59\">\n                        Login\n                      </span>\n\n                      <div className=\"wrap-input100 validate-input\" data-validate=\"Username is required\">\n                        <span className=\"label-input100\">Username</span>\n                        <input required onChange={this.handleTextforlogin.bind(this)}  className=\"input100\" type=\"text\" name=\"username\" placeholder=\"Username...\"/>\n                        <span className=\"focus-input100\"></span>\n                      </div>\n\n                      <div className=\"wrap-input100 validate-input\" data-validate = \"Password is required\">\n                        <span className=\"label-input100\">Password</span>\n                        <input required onChange={this.handleTextforlogin.bind(this)}  className=\"input100\" type=\"password\" name=\"pass\" placeholder=\"*************\"/>\n                        <span className=\"focus-input100\"></span>\n                      </div>\n\n                      <div className=\"container-login100-form-btn\">\n                        <div className=\"wrap-login100-form-btn\">\n                          <div className=\"login100-form-bgbtn\"></div>\n                          <button onClick={this.sendToLogin.bind(this)} className=\"login100-form-btn\">\n                            Login\n                          </button>\n                        </div>\n                      </div>\n                      <div className=\"wrap-input100 validate-input\" data-validate = \"Repeat Password is required\">\n                        {this.props.msg}\n                      </div>\n                  </div>\n                </div>\n              </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => { \n  return { msg: state.msg };\n}; \n\nconst  mapDispatchToProps = dispatch => {  \n  return  { \n      //every field change new action will dispatch \n      LoginAction: function(input) { \n        debugger;\n           return  dispatch(LoginAction(input));\n          // return  dispatch({type:\"LOAD_MOVIES\", data:[]});\n        }\n      }\n  };\nconst login = connect(mapStateToProps, mapDispatchToProps)(Login);\n\nexport default login;\n","import React, { Component } from 'react';\nimport {LoginAction} from '../state/actions';\nimport {connect} from 'react-redux';\n\n\nclass Admin extends Component {\n  \n  \n\n  sendToLogin(){\n    this.props.LoginAction(this.state)\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>admin page</h1>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => { \n  return { msg: state.msg };\n}; \n\nconst  mapDispatchToProps = dispatch => {  \n  return  { \n      //every field change new action will dispatch \n      LoginAction: function() { \n        debugger;\n           return  dispatch(LoginAction());\n          // return  dispatch({type:\"LOAD_MOVIES\", data:[]});\n        }\n      }\n  };\nconst admin = connect(mapStateToProps, mapDispatchToProps)(Admin);\n\nexport default admin;\n","import React, { Component } from 'react';\nimport {Logout} from '../state/actions';\nimport {connect} from 'react-redux';\n\n\n\nclass User extends Component {\n  \n  \n\n  sendToLogout(){\n    this.props.Logout()\n  }\n\n  render() {\n    if(this.props.role){\n      return (\n        <div className=\"container\"> \n          <div className=\"menu\">\n            <div className=\"row\">\n              <div className=\"col-4\">\n                <h2>VacationHunter</h2>\n              </div>\n              <div className=\"col-4\">\n                <h3>Hello Username</h3>\n              </div>\n              <div className=\"col-4\">\n                <button onClick={this.sendToLogout.bind(this)} className=\"btn btn-primary\">Logout</button>\n              </div>\n            </div>\n          </div>  \n        </div>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = state => { \n  return { role: state.role };\n}; \n\nconst  mapDispatchToProps = dispatch => {  \n  return  { \n      //every field change new action will dispatch \n      Logout: function() { \n        debugger;\n           return  dispatch(Logout());\n          // return  dispatch({type:\"LOAD_MOVIES\", data:[]});\n        }\n      }\n  };\nconst user = connect(mapStateToProps, mapDispatchToProps)(User);\n\nexport default user;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport Register from \"./compo/Register\";\nimport Login from \"./compo/Login\";\nimport {connect} from 'react-redux';\nimport Admin from \"./compo/Admin\";\nimport User from \"./compo/User\";\n\nimport {CheckSession} from \"./state/actions\"\n\nclass App extends Component {\n\n  async componentDidMount(){\n    this.props.CheckSession();\n  }\n\n  render() {\n    if(!this.props.role){\n      return (\n        <div className=\"App\">\n          <Router>\n            <div>\n              <nav>\n                <ul>\n                  <li>\n                    <Link to=\"/\">Login</Link>\n                  </li>\n                  <li>\n                    <Link to=\"/register\">Register</Link>\n                  </li>\n                </ul>\n              </nav>\n  \n              <Route path=\"/\" exact component={Login} />\n              <Route path=\"/register/\" component={Register} />\n            </div>\n          </Router>\n        </div>\n      );\n    }\n    if(this.props.role == \"user\"){\n      return(\n        <div>\n          <User />\n          {/* <Router>\n            <div>\n              <Route exact path=\"/user\"  component={User} />\n            </div>\n          </Router> */}\n        </div>\n      )\n    }\n    if(this.props.role == \"admin\"){\n      return(\n        <div>\n          <Router>\n            <div>\n              <nav>\n                <ul>\n                  <li>\n                    <Link to=\"/admin\">admin</Link>\n                  </li>\n                </ul>\n              </nav>\n              <Route path=\"/admin\" exact component={Admin} />\n            </div>\n          </Router>\n        </div>\n      )\n    }\n\n    \n  }\n}\nconst  mapDispatchToProps = dispatch => {  \n  return  { \n      CheckSession: function() { \n           return  dispatch(CheckSession());\n        }\n      }\n  };\n\nconst mapStateToProps = state => { \n  return { role: state.role };\n}; \nconst app = connect(mapStateToProps,mapDispatchToProps)(App);\nexport default app;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n\r\n\r\n};\r\n \r\nconst myReducer = (state = initialState, action) => {\r\n    let newState = {};\r\n    debugger;\r\n    switch (action.type) {\r\n         case 'INCORRECTSECOND_PASS':\r\n         newState = Object.assign({}, state, {\r\n                msg: \"The password is incorrect\"\r\n                });\r\n                return newState;\r\n        \r\n        case 'ALL_INPUT_MANDATORY':\r\n        newState = Object.assign({}, state, {\r\n            msg: \"All inputs are mandatory\"\r\n            });\r\n            return newState;\r\n\r\n        case 'LOGIN_ERROR':\r\n        newState = Object.assign({}, state, {\r\n            msg: \"Username and password are mandetory\"\r\n            });\r\n            return newState;\r\n\r\n        case 'REGISTERED':\r\n        newState = Object.assign({}, state, {\r\n            msg: action.data\r\n            });\r\n            return newState;\r\n\r\n        case 'LOGIN_STATUS':\r\n        newState = Object.assign({}, state, {\r\n            role: action.data.role,\r\n            clientName: action.data.username\r\n            });\r\n            return newState;\r\n\r\n        case 'CHECK_SESSION':\r\n        newState = Object.assign({}, state, {\r\n            role: action.data.role,\r\n            clientName: action.data.name\r\n            });\r\n            return newState;\r\n        case 'SESSION_FAILED':\r\n        newState = Object.assign({}, state, {\r\n            role: \"\",\r\n            clientName: \"\"\r\n            });\r\n            return newState;\r\n        \r\n        case 'LOGOUT':\r\n        newState = Object.assign({}, state, {\r\n            status:action.data\r\n            });\r\n            return newState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default myReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport myReducer from \"./state/reducer\";\nimport { Provider } from \"react-redux\"; \nimport { createStore, applyMiddleware } from 'redux'; \nimport thunk from 'redux-thunk';\n\nconst store = createStore(myReducer, applyMiddleware(thunk));\n\nReactDOM.render(<Provider store={store}>\n    <App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}