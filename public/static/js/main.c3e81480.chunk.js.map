{"version":3,"sources":["state/actions.js","compo/Register.js","compo/Login.js","compo/Admin.js","compo/User.js","App.js","serviceWorker.js","state/reducer.js","index.js"],"names":["CheckSession","_ref2","Object","asyncToGenerator","regenerator_default","a","mark","_callee2","dispatch","response","data","wrap","_context2","prev","next","fetch","sent","json","success","type","stop","_x2","apply","this","arguments","LoginAction","input","_ref5","_callee5","newObjToLogin","res","_context5","username","pass","method","headers","Accept","Content-Type","body","JSON","stringify","_x5","Register","state","name","repeat","ev","setState","defineProperty","target","value","props","registerAction","react_default","createElement","className","data-validate","required","onChange","handleText","bind","placeholder","onClick","sendToRegister","msg","Component","register","connect","_ref","_callee","newObjToRegister","_context","console","log","_x","RegisterAction","Login","handleTextforlogin","sendToLogin","login","Admin","admin","User","DataUser","Logout","role","clientName","sendToLogout","vacations","map","v","destination","user","id","_ref4","_callee4","_context4","_x4","_ref3","_callee3","_context3","_x3","App","compo_User","react_router_dom","to","react_router","path","exact","component","app","Boolean","window","location","hostname","match","initialState","myReducer","length","undefined","action","assign","userName","userData","store","createStore","applyMiddleware","thunk","ReactDOM","render","es","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c3e81480.chunk.js","sourcesContent":["export const RegisterAction = (input) => {\r\n   \r\n    return async function (dispatch) {\r\n       \r\n       let newObjToRegister = input;\r\n\r\n       if(newObjToRegister.name == \"\"||newObjToRegister.username==\"\"||newObjToRegister.pass==\"\"||newObjToRegister.repeat==\"\"){\r\n           console.log(\"all mendatory\")\r\n           dispatch({\r\n            type: \"ALL_INPUT_MANDATORY\",\r\n            data: null\r\n        });\r\n           \r\n       }else if(newObjToRegister.pass !== newObjToRegister.repeat){\r\n            console.log(\"The password is incorrect\")\r\n            dispatch({\r\n                type: \"INCORRECTSECOND_PASS\",\r\n                data: null\r\n            });\r\n\r\n       }else{\r\n        \r\n        let res = await fetch('http://localhost:3000/register', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(newObjToRegister)\r\n        });\r\n\r\n        let data = await res.json();\r\n        dispatch({\r\n            type: \"REGISTERED\",\r\n            data: data.msg\r\n        });\r\n       }\r\n    };\r\n}\r\n\r\nexport const CheckSession = () =>{\r\n    return async function (dispatch){\r\n        let response = await fetch('http://localhost:3000/checksession');\r\n        let data = await response.json();\r\n        if(data.success == true){\r\n            dispatch({\r\n                type: \"CHECK_SESSION\",\r\n                data: data\r\n            });\r\n        }else{\r\n            dispatch({\r\n                type: \"SESSION_FAILED\",\r\n                data: null\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const DataUser = () =>{\r\n    return async function (dispatch){\r\n        let response = await fetch('http://localhost:3000/user');\r\n        let data = await response.json();\r\n            dispatch({\r\n                type: \"USER_DATA\",\r\n                data: data\r\n            });\r\n    }\r\n}\r\n\r\nexport const Logout = () =>{\r\n    return async function (dispatch){\r\n        let response = await fetch('http://localhost:3000/logout');\r\n        let data = await response.json();\r\n            dispatch({\r\n                type: \"LOGOUT\",\r\n                data: data\r\n            });\r\n    }\r\n}\r\n\r\nexport const LoginAction = (input) => {\r\n   \r\n    return async function (dispatch) {\r\n       \r\n       let newObjToLogin = input;\r\n       if(newObjToLogin.username ==\"\" || newObjToLogin.pass==\"\"){\r\n        dispatch({\r\n            type: \"LOGIN_ERROR\",\r\n            data: null\r\n        });\r\n       }else{\r\n        let res = await fetch('http://localhost:3000/login', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-Type': 'application/json'\r\n            },\r\n            body: JSON.stringify(newObjToLogin)\r\n        });\r\n\r\n        let data = await res.json();\r\n        dispatch({\r\n            type: \"LOGIN_STATUS\",\r\n            data: data\r\n        });\r\n       }\r\n    };\r\n}","import React, { Component } from 'react';\nimport {RegisterAction} from '../state/actions';\nimport {connect} from 'react-redux';\n\n\nclass Register extends Component {\n  state ={\n    name:\"\",\n    username:\"\",\n    pass:\"\",\n    repeat:\"\"\n\n  }\n  handleText(ev)\n  {\n    this.setState({ [ev.target.name]:ev.target.value  })\n  }\n\n  sendToRegister(){\n    this.props.registerAction(this.state)\n    \n  }\n\n  render() {\n    return (\n      <div className=\"registerstyle\">\n              <div className=\"limiter\">\n                <div className=\"container-login100\">\n                  <div className=\"login100-more\"></div>\n\n                  <div className=\"wrap-login100 p-l-50 p-r-50 p-t-72 p-b-50\">\n                    <form className=\"login100-form validate-form\"/>\n                      <span className=\"login100-form-title p-b-59\">\n                        Sign Up\n                      </span>\n\n                      <div className=\"wrap-input100 validate-input\" data-validate=\"Name is required\">\n                        <span className=\"label-input100\">Full Name</span>\n                        <input required onChange={this.handleText.bind(this)}  className=\"input100\" type=\"text\" name=\"name\" placeholder=\"Name...\"/>\n                        <span className=\"focus-input100\"></span>\n                      </div>\n\n                      <div className=\"wrap-input100 validate-input\" data-validate=\"Username is required\">\n                        <span className=\"label-input100\">Username</span>\n                        <input required onChange={this.handleText.bind(this)}  className=\"input100\" type=\"text\" name=\"username\" placeholder=\"Username...\"/>\n                        <span className=\"focus-input100\"></span>\n                      </div>\n\n                      <div className=\"wrap-input100 validate-input\" data-validate = \"Password is required\">\n                        <span className=\"label-input100\">Password</span>\n                        <input required onChange={this.handleText.bind(this)}  className=\"input100\" type=\"password\" name=\"pass\" placeholder=\"*************\"/>\n                        <span className=\"focus-input100\"></span>\n                      </div>\n\n                      <div className=\"wrap-input100 validate-input\" data-validate = \"Repeat Password is required\">\n                        <span className=\"label-input100\">Repeat Password</span>\n                        <input required onChange={this.handleText.bind(this)} className=\"input100\" type=\"password\" name=\"repeat\" placeholder=\"*************\"/>\n                        <span className=\"focus-input100\"></span>\n                      </div>\n\n                      <div className=\"container-login100-form-btn\">\n                        <div className=\"wrap-login100-form-btn\">\n                          <div className=\"login100-form-bgbtn\"></div>\n                          <button onClick={this.sendToRegister.bind(this)} className=\"login100-form-btn\">\n                            Sign Up\n                          </button>\n                        </div>\n                      </div>\n                      <div className=\"wrap-input100 validate-input\" data-validate = \"Repeat Password is required\">\n                        {this.props.msg}\n                      </div>\n                  </div>\n                </div>\n              </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => { \n  return { msg: state.msg };\n}; \n\nconst  mapDispatchToProps = dispatch => {  \n  return  { \n      //every field change new action will dispatch \n      registerAction: function(input) { \n           return  dispatch(RegisterAction(input));\n          // return  dispatch({type:\"LOAD_MOVIES\", data:[]});\n        }\n      }\n  };\nconst register = connect(mapStateToProps, mapDispatchToProps)(Register);\n\nexport default register;\n","import React, { Component } from 'react';\nimport {LoginAction} from '../state/actions';\nimport {connect} from 'react-redux';\n\n\nclass Login extends Component {\n  state ={\n    username:\"\",\n    pass:\"\"\n  }\n  handleTextforlogin(ev)\n  {\n    this.setState({ [ev.target.name]:ev.target.value  })\n  }\n\n  sendToLogin(){\n    this.props.LoginAction(this.state)\n  }\n\n  render() {\n    return (\n      <div className=\"registerstyle\">\n              <div className=\"limiter\">\n                <div className=\"container-login100\">\n                  <div className=\"login100-more\"></div>\n\n                  <div className=\"wrap-login100 p-l-50 p-r-50 p-t-72 p-b-50\">\n                    <form className=\"login100-form validate-form\"/>\n                      <span className=\"login100-form-title p-b-59\">\n                        Login\n                      </span>\n\n                      <div className=\"wrap-input100 validate-input\" data-validate=\"Username is required\">\n                        <span className=\"label-input100\">Username</span>\n                        <input required onChange={this.handleTextforlogin.bind(this)}  className=\"input100\" type=\"text\" name=\"username\" placeholder=\"Username...\"/>\n                        <span className=\"focus-input100\"></span>\n                      </div>\n\n                      <div className=\"wrap-input100 validate-input\" data-validate = \"Password is required\">\n                        <span className=\"label-input100\">Password</span>\n                        <input required onChange={this.handleTextforlogin.bind(this)}  className=\"input100\" type=\"password\" name=\"pass\" placeholder=\"*************\"/>\n                        <span className=\"focus-input100\"></span>\n                      </div>\n\n                      <div className=\"container-login100-form-btn\">\n                        <div className=\"wrap-login100-form-btn\">\n                          <div className=\"login100-form-bgbtn\"></div>\n                          <button onClick={this.sendToLogin.bind(this)} className=\"login100-form-btn\">\n                            Login\n                          </button>\n                        </div>\n                      </div>\n                      <div className=\"wrap-input100 validate-input\" data-validate = \"Repeat Password is required\">\n                        {this.props.msg}\n                      </div>\n                  </div>\n                </div>\n              </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => { \n  return { msg: state.msg };\n}; \n\nconst  mapDispatchToProps = dispatch => {  \n  return  { \n      //every field change new action will dispatch \n      LoginAction: function(input) { \n        debugger;\n           return  dispatch(LoginAction(input));\n          // return  dispatch({type:\"LOAD_MOVIES\", data:[]});\n        }\n      }\n  };\nconst login = connect(mapStateToProps, mapDispatchToProps)(Login);\n\nexport default login;\n","import React, { Component } from 'react';\nimport {LoginAction} from '../state/actions';\nimport {connect} from 'react-redux';\n\n\nclass Admin extends Component {\n  \n  \n\n  sendToLogin(){\n    this.props.LoginAction(this.state)\n  }\n\n  render() {\n    return (\n      <div>\n        <h1>admin page</h1>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => { \n  return { msg: state.msg };\n}; \n\nconst  mapDispatchToProps = dispatch => {  \n  return  { \n      //every field change new action will dispatch \n      LoginAction: function() { \n        debugger;\n           return  dispatch(LoginAction());\n          // return  dispatch({type:\"LOAD_MOVIES\", data:[]});\n        }\n      }\n  };\nconst admin = connect(mapStateToProps, mapDispatchToProps)(Admin);\n\nexport default admin;\n","import React, { Component } from 'react';\nimport {Logout , CheckSession, DataUser} from '../state/actions';\nimport {connect} from 'react-redux';\n\n\n\nclass User extends Component {\n  componentDidMount(){\n    this.props.DataUser();\n  }\n  \n   sendToLogout(){\n    this.props.Logout();\n  }\n\n  render() {\n    if(this.props.role == \"user\"){\n      return (\n        <div className=\"container\"> \n          <div className=\"menu\">\n            <div className=\"row mt-3\">\n              <div className=\"col-4\">\n                <h2>VacationHunter</h2>\n              </div>\n              <div className=\"col-4\">\n                <h3>Hello {this.props.clientName}</h3>\n              </div>\n              <div className=\"col-4\">\n                <button onClick={this.sendToLogout.bind(this)} className=\"btn btn-primary\">Logout</button>\n              </div>\n            </div>\n          </div>\n          <div className=\"row mt-3\">\n            {this.props.vacations.map(v =>{return (<div>{v.destination}</div>)})}\n        </div>\n        </div>\n      );\n    }\n  }\n}\n\nconst mapStateToProps = state => { \n  return { role: state.role,clientName:state.clientName,id: state.id, vacations: state.vacations };\n}; \n\nconst  mapDispatchToProps = dispatch => {  \n  return  { \n      Logout: function() { \n        return  dispatch(Logout());\n        },\n        CheckSession: function(){\n          return dispatch(CheckSession());\n        },\n        DataUser: function(){\n          return dispatch(DataUser());\n        }\n  }};\nconst user = connect(mapStateToProps, mapDispatchToProps)(User);\n\nexport default user;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport Register from \"./compo/Register\";\nimport Login from \"./compo/Login\";\nimport {connect} from 'react-redux';\nimport Admin from \"./compo/Admin\";\nimport User from \"./compo/User\";\n\nimport {CheckSession} from \"./state/actions\"\n\nclass App extends Component {\n\n  async componentDidMount(){\n    this.props.CheckSession();\n  }\n\n  render() {\n    if(!this.props.role){\n      return (\n        <div className=\"App\">\n          <Router>\n            <div>\n              <nav>\n                <ul>\n                  <li>\n                    <Link to=\"/\">Login</Link>\n                  </li>\n                  <li>\n                    <Link to=\"/register\">Register</Link>\n                  </li>\n                </ul>\n              </nav>\n  \n              <Route path=\"/\" exact component={Login} />\n              <Route path=\"/register/\" component={Register} />\n            </div>\n          </Router>\n        </div>\n      );\n    }\n    if(this.props.role == \"user\"){\n      return(\n        <div>\n          <User />\n          {/* <Router>\n            <div>\n              <Route exact path=\"/user\"  component={User} />\n            </div>\n          </Router> */}\n        </div>\n      )\n    }\n    if(this.props.role == \"admin\"){\n      return(\n        <div>\n          <Router>\n            <div>\n              <nav>\n                <ul>\n                  <li>\n                    <Link to=\"/admin\">admin</Link>\n                  </li>\n                </ul>\n              </nav>\n              <Route path=\"/admin\" exact component={Admin} />\n            </div>\n          </Router>\n        </div>\n      )\n    }\n\n    \n  }\n}\nconst  mapDispatchToProps = dispatch => {  \n  return  { \n      CheckSession: function() { \n           return  dispatch(CheckSession());\n        }\n      }\n  };\n\nconst mapStateToProps = state => { \n  return { role: state.role };\n}; \nconst app = connect(mapStateToProps,mapDispatchToProps)(App);\nexport default app;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initialState = {\r\n\r\n\r\n};\r\n \r\nconst myReducer = (state = initialState, action) => {\r\n    let newState = {};\r\n    debugger;\r\n    switch (action.type) {\r\n         case 'INCORRECTSECOND_PASS':\r\n         newState = Object.assign({}, state, {\r\n                msg: \"The password is incorrect\"\r\n                });\r\n                return newState;\r\n        \r\n        case 'ALL_INPUT_MANDATORY':\r\n        newState = Object.assign({}, state, {\r\n            msg: \"All inputs are mandatory\"\r\n            });\r\n            return newState;\r\n\r\n        case 'LOGIN_ERROR':\r\n        newState = Object.assign({}, state, {\r\n            msg: \"Username and password are mandetory\"\r\n            });\r\n            return newState;\r\n\r\n        case 'REGISTERED':\r\n        newState = Object.assign({}, state, {\r\n            msg: action.data\r\n            });\r\n            return newState;\r\n\r\n        case 'LOGIN_STATUS':\r\n        newState = Object.assign({}, state, {\r\n            role: action.data.role,\r\n            clientName: action.data.name,\r\n            id: action.data.id,\r\n            userName:action.data.username\r\n            });\r\n            return newState;\r\n\r\n        case 'CHECK_SESSION':\r\n        newState = Object.assign({}, state, {\r\n            id: action.data.id,\r\n            role: action.data.role,\r\n            clientName: action.data.name,\r\n            userName:action.data.username\r\n            });\r\n            return newState;\r\n        case 'SESSION_FAILED':\r\n        newState = Object.assign({}, state, {\r\n            role: \"\",\r\n            clientName: \"\"\r\n            });\r\n            return newState;\r\n        \r\n        case 'LOGOUT':\r\n        newState = Object.assign({}, state, {\r\n            role:action.data.role\r\n            });\r\n            return newState;\r\n        \r\n        case 'UserData':\r\n        newState = Object.assign({}, state, {\r\n            id:action.data.userData.id,\r\n            role:action.data.userData.role ,\r\n            clientName:action.data.userData.clientName ,\r\n            userName:action.data.userData.userName,\r\n            vacations:action.data.userData.vacations\r\n            });\r\n            return newState;\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport default myReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport myReducer from \"./state/reducer\";\nimport { Provider } from \"react-redux\"; \nimport { createStore, applyMiddleware } from 'redux'; \nimport thunk from 'redux-thunk';\n\nconst store = createStore(myReducer, applyMiddleware(thunk));\n\nReactDOM.render(<Provider store={store}>\n    <App />\n</Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}